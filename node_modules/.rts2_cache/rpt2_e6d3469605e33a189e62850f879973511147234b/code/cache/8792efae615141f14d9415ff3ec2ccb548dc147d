{"code":"import { createCallExpression } from '../ast';\r\nimport { isSlotOutlet } from '../utils';\r\nimport { buildProps } from './transformElement';\r\nimport { createCompilerError } from '../errors';\r\nimport { RENDER_SLOT } from '../runtimeHelpers';\r\nexport const transformSlotOutlet = (node, context) => {\r\n    if (isSlotOutlet(node)) {\r\n        const { props, children, loc } = node;\r\n        const $slots = context.prefixIdentifiers ? `_ctx.$slots` : `$slots`;\r\n        let slotName = `\"default\"`;\r\n        // check for <slot name=\"xxx\" OR :name=\"xxx\" />\r\n        let nameIndex = -1;\r\n        for (let i = 0; i < props.length; i++) {\r\n            const prop = props[i];\r\n            if (prop.type === 6 /* ATTRIBUTE */) {\r\n                if (prop.name === `name` && prop.value) {\r\n                    // static name=\"xxx\"\r\n                    slotName = JSON.stringify(prop.value.content);\r\n                    nameIndex = i;\r\n                    break;\r\n                }\r\n            }\r\n            else if (prop.name === `bind`) {\r\n                const { arg, exp } = prop;\r\n                if (arg &&\r\n                    exp &&\r\n                    arg.type === 4 /* SIMPLE_EXPRESSION */ &&\r\n                    arg.isStatic &&\r\n                    arg.content === `name`) {\r\n                    // dynamic :name=\"xxx\"\r\n                    slotName = exp;\r\n                    nameIndex = i;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        const slotArgs = [$slots, slotName];\r\n        const propsWithoutName = nameIndex > -1\r\n            ? props.slice(0, nameIndex).concat(props.slice(nameIndex + 1))\r\n            : props;\r\n        let hasProps = propsWithoutName.length > 0;\r\n        if (hasProps) {\r\n            const { props: propsExpression, directives } = buildProps(propsWithoutName, loc, context);\r\n            if (directives.length) {\r\n                context.onError(createCompilerError(41 /* X_UNEXPECTED_DIRECTIVE_ON_SLOT_OUTLET */, directives[0].loc));\r\n            }\r\n            if (propsExpression) {\r\n                slotArgs.push(propsExpression);\r\n            }\r\n            else {\r\n                hasProps = false;\r\n            }\r\n        }\r\n        if (children.length) {\r\n            if (!hasProps) {\r\n                slotArgs.push(`{}`);\r\n            }\r\n            slotArgs.push(children);\r\n        }\r\n        node.codegenNode = createCallExpression(context.helper(RENDER_SLOT), slotArgs, loc);\r\n    }\r\n};\r\n","references":["/Users/apple/Desktop/vue3/vue-next/packages/compiler-core/src/transform.ts","/Users/apple/Desktop/vue3/vue-next/packages/compiler-core/src/ast.ts","/Users/apple/Desktop/vue3/vue-next/packages/compiler-core/src/utils.ts","/Users/apple/Desktop/vue3/vue-next/packages/compiler-core/src/transforms/transformElement.ts","/Users/apple/Desktop/vue3/vue-next/packages/compiler-core/src/errors.ts","/Users/apple/Desktop/vue3/vue-next/packages/compiler-core/src/runtimeHelpers.ts"]}
