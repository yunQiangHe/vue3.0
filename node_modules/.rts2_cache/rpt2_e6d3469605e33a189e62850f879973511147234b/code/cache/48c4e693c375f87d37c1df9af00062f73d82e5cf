{"code":"import { track, trigger } from './effect';\r\nimport { isObject } from '@vue/shared';\r\nimport { reactive } from './reactive';\r\nexport const refSymbol = Symbol(__DEV__ ? 'refSymbol' : undefined);\r\nconst convert = (val) => (isObject(val) ? reactive(val) : val);\r\nexport function ref(raw) {\r\n    raw = convert(raw);\r\n    const v = {\r\n        [refSymbol]: true,\r\n        get value() {\r\n            track(v, \"get\" /* GET */, '');\r\n            return raw;\r\n        },\r\n        set value(newVal) {\r\n            raw = convert(newVal);\r\n            trigger(v, \"set\" /* SET */, '');\r\n        }\r\n    };\r\n    return v;\r\n}\r\nexport function isRef(v) {\r\n    return v ? v[refSymbol] === true : false;\r\n}\r\nexport function toRefs(object) {\r\n    const ret = {};\r\n    for (const key in object) {\r\n        ret[key] = toProxyRef(object, key);\r\n    }\r\n    return ret;\r\n}\r\nfunction toProxyRef(object, key) {\r\n    const v = {\r\n        [refSymbol]: true,\r\n        get value() {\r\n            return object[key];\r\n        },\r\n        set value(newVal) {\r\n            object[key] = newVal;\r\n        }\r\n    };\r\n    return v;\r\n}\r\n","references":["/Users/apple/Desktop/vue3/vue-next/packages/reactivity/src/effect.ts","/Users/apple/Desktop/vue3/vue-next/packages/reactivity/src/operations.ts","/Users/apple/Desktop/vue3/vue-next/packages/shared/src/index.ts","/Users/apple/Desktop/vue3/vue-next/packages/reactivity/src/reactive.ts"]}
