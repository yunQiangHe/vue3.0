{"code":"import { createObjectProperty, createSimpleExpression } from '../ast';\r\nimport { createCompilerError } from '../errors';\r\nimport { camelize } from '@vue/shared';\r\nimport { CAMELIZE } from '../runtimeHelpers';\r\n// v-bind without arg is handled directly in ./element.ts due to it affecting\r\n// codegen for the entire props object. This transform here is only for v-bind\r\n// *with* args.\r\nexport const transformBind = (dir, context) => {\r\n    const { exp, modifiers, loc } = dir;\r\n    const arg = dir.arg;\r\n    if (!exp) {\r\n        context.onError(createCompilerError(39 /* X_V_BIND_NO_EXPRESSION */, loc));\r\n    }\r\n    // .prop is no longer necessary due to new patch behavior\r\n    // .sync is replaced by v-model:arg\r\n    if (modifiers.includes('camel')) {\r\n        if (arg.type === 4 /* SIMPLE_EXPRESSION */) {\r\n            if (arg.isStatic) {\r\n                arg.content = camelize(arg.content);\r\n            }\r\n            else {\r\n                arg.content = `${context.helperString(CAMELIZE)}(${arg.content})`;\r\n            }\r\n        }\r\n        else {\r\n            arg.children.unshift(`${context.helperString(CAMELIZE)}(`);\r\n            arg.children.push(`)`);\r\n        }\r\n    }\r\n    return {\r\n        props: createObjectProperty(arg, exp || createSimpleExpression('', true, loc)),\r\n        needRuntime: false\r\n    };\r\n};\r\n","references":["/Users/apple/Desktop/vue3/vue-next/packages/compiler-core/src/transform.ts","/Users/apple/Desktop/vue3/vue-next/packages/compiler-core/src/ast.ts","/Users/apple/Desktop/vue3/vue-next/packages/compiler-core/src/errors.ts","/Users/apple/Desktop/vue3/vue-next/packages/shared/src/index.ts","/Users/apple/Desktop/vue3/vue-next/packages/compiler-core/src/runtimeHelpers.ts"]}
