{"code":"import { isString } from '@vue/shared';\r\nimport { toRaw } from '@vue/reactivity';\r\nlet stack = [];\r\nexport function pushWarningContext(vnode) {\r\n    stack.push(vnode);\r\n}\r\nexport function popWarningContext() {\r\n    stack.pop();\r\n}\r\nexport function warn(msg, ...args) {\r\n    const instance = stack.length ? stack[stack.length - 1].component : null;\r\n    const appWarnHandler = instance && instance.appContext.config.warnHandler;\r\n    const trace = getComponentTrace();\r\n    if (appWarnHandler) {\r\n        appWarnHandler(msg + args.join(''), instance && instance.renderProxy, formatTrace(trace).join(''));\r\n        return;\r\n    }\r\n    console.warn(`[Vue warn]: ${msg}`, ...args);\r\n    // avoid spamming console during tests\r\n    if (typeof process !== 'undefined' && process.env.NODE_ENV === 'test') {\r\n        return;\r\n    }\r\n    if (!trace.length) {\r\n        return;\r\n    }\r\n    if (trace.length > 1 && console.groupCollapsed) {\r\n        console.groupCollapsed('at', ...formatTraceEntry(trace[0]));\r\n        const logs = [];\r\n        trace.slice(1).forEach((entry, i) => {\r\n            if (i !== 0)\r\n                logs.push('\\n');\r\n            logs.push(...formatTraceEntry(entry, i + 1));\r\n        });\r\n        console.log(...logs);\r\n        console.groupEnd();\r\n    }\r\n    else {\r\n        console.log(...formatTrace(trace));\r\n    }\r\n}\r\nfunction getComponentTrace() {\r\n    let currentVNode = stack[stack.length - 1];\r\n    if (!currentVNode) {\r\n        return [];\r\n    }\r\n    // we can't just use the stack because it will be incomplete during updates\r\n    // that did not start from the root. Re-construct the parent chain using\r\n    // instance parent pointers.\r\n    const normalizedStack = [];\r\n    while (currentVNode) {\r\n        const last = normalizedStack[0];\r\n        if (last && last.vnode === currentVNode) {\r\n            last.recurseCount++;\r\n        }\r\n        else {\r\n            normalizedStack.push({\r\n                vnode: currentVNode,\r\n                recurseCount: 0\r\n            });\r\n        }\r\n        const parentInstance = currentVNode.component\r\n            .parent;\r\n        currentVNode = parentInstance && parentInstance.vnode;\r\n    }\r\n    return normalizedStack;\r\n}\r\nfunction formatTrace(trace) {\r\n    const logs = [];\r\n    trace.forEach((entry, i) => {\r\n        const formatted = formatTraceEntry(entry, i);\r\n        if (i === 0) {\r\n            logs.push('at', ...formatted);\r\n        }\r\n        else {\r\n            logs.push('\\n', ...formatted);\r\n        }\r\n    });\r\n    return logs;\r\n}\r\nfunction formatTraceEntry({ vnode, recurseCount }, depth = 0) {\r\n    const padding = depth === 0 ? '' : ' '.repeat(depth * 2 + 1);\r\n    const postfix = recurseCount > 0 ? `... (${recurseCount} recursive calls)` : ``;\r\n    const open = padding + `<${formatComponentName(vnode)}`;\r\n    const close = `>` + postfix;\r\n    const rootLabel = vnode.component.parent == null ? `(Root)` : ``;\r\n    return vnode.props\r\n        ? [open, ...formatProps(vnode.props), close, rootLabel]\r\n        : [open + close, rootLabel];\r\n}\r\nconst classifyRE = /(?:^|[-_])(\\w)/g;\r\nconst classify = (str) => str.replace(classifyRE, c => c.toUpperCase()).replace(/[-_]/g, '');\r\nfunction formatComponentName(vnode, file) {\r\n    const Component = vnode.type;\r\n    let name = Component.displayName || Component.name;\r\n    if (!name && file) {\r\n        const match = file.match(/([^/\\\\]+)\\.vue$/);\r\n        if (match) {\r\n            name = match[1];\r\n        }\r\n    }\r\n    return name ? classify(name) : 'AnonymousComponent';\r\n}\r\nfunction formatProps(props) {\r\n    const res = [];\r\n    for (const key in props) {\r\n        const value = props[key];\r\n        if (isString(value)) {\r\n            res.push(`${key}=${JSON.stringify(value)}`);\r\n        }\r\n        else {\r\n            res.push(`${key}=`, toRaw(value));\r\n        }\r\n    }\r\n    return res;\r\n}\r\n","references":["/Users/apple/Desktop/vue3/vue-next/packages/runtime-core/src/vnode.ts","/Users/apple/Desktop/vue3/vue-next/packages/runtime-core/src/component.ts","/Users/apple/Desktop/vue3/vue-next/packages/shared/src/index.ts","/Users/apple/Desktop/vue3/vue-next/packages/reactivity/src/index.ts"]}
