{"code":"import { createObjectProperty, createSimpleExpression, createCompoundExpression } from '../ast';\r\nimport { capitalize } from '@vue/shared';\r\nimport { createCompilerError } from '../errors';\r\nimport { processExpression } from './transformExpression';\r\nconst fnExpRE = /^([\\w$_]+|\\([^)]*?\\))\\s*=>|^function(?:\\s+[\\w$]+)?\\s*\\(/;\r\nconst simplePathRE = /^[A-Za-z_$][\\w$]*(?:\\.[A-Za-z_$][\\w$]*|\\['[^']*?']|\\[\"[^\"]*?\"]|\\[\\d+]|\\[[A-Za-z_$][\\w$]*])*$/;\r\n// v-on without arg is handled directly in ./element.ts due to it affecting\r\n// codegen for the entire props object. This transform here is only for v-on\r\n// *with* args.\r\nexport const transformOn = (dir, context) => {\r\n    const { loc, modifiers } = dir;\r\n    const arg = dir.arg;\r\n    if (!dir.exp && !modifiers.length) {\r\n        context.onError(createCompilerError(40 /* X_V_ON_NO_EXPRESSION */, loc));\r\n    }\r\n    let eventName;\r\n    if (arg.type === 4 /* SIMPLE_EXPRESSION */) {\r\n        if (arg.isStatic) {\r\n            eventName = createSimpleExpression(`on${capitalize(arg.content)}`, true, arg.loc);\r\n        }\r\n        else {\r\n            eventName = createCompoundExpression([`\"on\" + (`, arg, `)`]);\r\n        }\r\n    }\r\n    else {\r\n        // already a compound expression.\r\n        eventName = arg;\r\n        eventName.children.unshift(`\"on\" + (`);\r\n        eventName.children.push(`)`);\r\n    }\r\n    // TODO .once modifier handling since it is platform agnostic\r\n    // other modifiers are handled in compiler-dom\r\n    // handler processing\r\n    if (dir.exp) {\r\n        // exp is guaranteed to be a simple expression here because v-on w/ arg is\r\n        // skipped by transformExpression as a special case.\r\n        let exp = dir.exp;\r\n        const isInlineStatement = !(simplePathRE.test(exp.content) || fnExpRE.test(exp.content));\r\n        // process the expression since it's been skipped\r\n        if (!__BROWSER__ && context.prefixIdentifiers) {\r\n            context.addIdentifiers(`$event`);\r\n            exp = processExpression(exp, context);\r\n            context.removeIdentifiers(`$event`);\r\n        }\r\n        if (isInlineStatement) {\r\n            // wrap inline statement in a function expression\r\n            exp = createCompoundExpression([\r\n                `$event => (`,\r\n                ...(exp.type === 4 /* SIMPLE_EXPRESSION */ ? [exp] : exp.children),\r\n                `)`\r\n            ]);\r\n        }\r\n        dir.exp = exp;\r\n    }\r\n    return {\r\n        props: createObjectProperty(eventName, dir.exp || createSimpleExpression(`() => {}`, false, loc)),\r\n        needRuntime: false\r\n    };\r\n};\r\n","references":["/Users/apple/Desktop/vue3/vue-next/packages/compiler-core/src/transform.ts","/Users/apple/Desktop/vue3/vue-next/packages/compiler-core/src/ast.ts","/Users/apple/Desktop/vue3/vue-next/packages/shared/src/index.ts","/Users/apple/Desktop/vue3/vue-next/packages/compiler-core/src/errors.ts","/Users/apple/Desktop/vue3/vue-next/packages/compiler-core/src/transforms/transformExpression.ts"]}
