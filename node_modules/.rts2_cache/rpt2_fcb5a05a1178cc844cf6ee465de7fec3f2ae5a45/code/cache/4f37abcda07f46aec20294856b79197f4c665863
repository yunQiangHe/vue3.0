{"code":"import { handleError } from './errorHandling';\r\nconst queue = [];\r\nconst postFlushCbs = [];\r\nconst p = Promise.resolve();\r\nlet isFlushing = false;\r\nexport function nextTick(fn) {\r\n    return fn ? p.then(fn) : p;\r\n}\r\nexport function queueJob(job) {\r\n    if (queue.indexOf(job) === -1) {\r\n        queue.push(job);\r\n        if (!isFlushing) {\r\n            nextTick(flushJobs);\r\n        }\r\n    }\r\n}\r\nexport function queuePostFlushCb(cb) {\r\n    if (Array.isArray(cb)) {\r\n        postFlushCbs.push.apply(postFlushCbs, cb);\r\n    }\r\n    else {\r\n        postFlushCbs.push(cb);\r\n    }\r\n    if (!isFlushing) {\r\n        nextTick(flushJobs);\r\n    }\r\n}\r\nconst dedupe = (cbs) => Array.from(new Set(cbs));\r\nexport function flushPostFlushCbs() {\r\n    if (postFlushCbs.length) {\r\n        const cbs = dedupe(postFlushCbs);\r\n        postFlushCbs.length = 0;\r\n        for (let i = 0; i < cbs.length; i++) {\r\n            cbs[i]();\r\n        }\r\n    }\r\n}\r\nconst RECURSION_LIMIT = 100;\r\nfunction flushJobs(seenJobs) {\r\n    isFlushing = true;\r\n    let job;\r\n    if (__DEV__) {\r\n        seenJobs = seenJobs || new Map();\r\n    }\r\n    while ((job = queue.shift())) {\r\n        if (__DEV__) {\r\n            const seen = seenJobs;\r\n            if (!seen.has(job)) {\r\n                seen.set(job, 1);\r\n            }\r\n            else {\r\n                const count = seen.get(job);\r\n                if (count > RECURSION_LIMIT) {\r\n                    throw new Error('Maximum recursive updates exceeded. ' +\r\n                        \"You may have code that is mutating state in your component's \" +\r\n                        'render function or updated hook.');\r\n                }\r\n                else {\r\n                    seen.set(job, count + 1);\r\n                }\r\n            }\r\n        }\r\n        try {\r\n            job();\r\n        }\r\n        catch (err) {\r\n            handleError(err, null, 10 /* SCHEDULER */);\r\n        }\r\n    }\r\n    flushPostFlushCbs();\r\n    isFlushing = false;\r\n    // some postFlushCb queued jobs!\r\n    // keep flushing until it drains.\r\n    if (queue.length) {\r\n        flushJobs(seenJobs);\r\n    }\r\n}\r\n","references":["/Users/apple/Desktop/vue3/vue-next/packages/runtime-core/src/errorHandling.ts"]}
