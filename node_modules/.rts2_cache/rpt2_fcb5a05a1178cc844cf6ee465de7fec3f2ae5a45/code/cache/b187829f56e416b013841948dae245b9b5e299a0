{"code":"import { nextTick } from './scheduler';\r\nimport { instanceWatch } from './apiWatch';\r\nimport { EMPTY_OBJ, hasOwn, globalsWhitelist } from '@vue/shared';\r\nexport const PublicInstanceProxyHandlers = {\r\n    get(target, key) {\r\n        const { renderContext, data, props, propsProxy } = target;\r\n        if (data !== EMPTY_OBJ && hasOwn(data, key)) {\r\n            return data[key];\r\n        }\r\n        else if (hasOwn(renderContext, key)) {\r\n            return renderContext[key];\r\n        }\r\n        else if (hasOwn(props, key)) {\r\n            // return the value from propsProxy for ref unwrapping and readonly\r\n            return propsProxy[key];\r\n        }\r\n        else {\r\n            // TODO simplify this?\r\n            switch (key) {\r\n                case '$data':\r\n                    return data;\r\n                case '$props':\r\n                    return propsProxy;\r\n                case '$attrs':\r\n                    return target.attrs;\r\n                case '$slots':\r\n                    return target.slots;\r\n                case '$refs':\r\n                    return target.refs;\r\n                case '$parent':\r\n                    return target.parent;\r\n                case '$root':\r\n                    return target.root;\r\n                case '$emit':\r\n                    return target.emit;\r\n                case '$el':\r\n                    return target.vnode.el;\r\n                case '$options':\r\n                    return target.type;\r\n                default:\r\n                    // methods are only exposed when options are supported\r\n                    if (__FEATURE_OPTIONS__) {\r\n                        switch (key) {\r\n                            case '$forceUpdate':\r\n                                return target.update;\r\n                            case '$nextTick':\r\n                                return nextTick;\r\n                            case '$watch':\r\n                                return instanceWatch.bind(target);\r\n                        }\r\n                    }\r\n                    return target.user[key];\r\n            }\r\n        }\r\n    },\r\n    // this trap is only called in browser-compiled render functions that use\r\n    // `with (this) {}`\r\n    has(_, key) {\r\n        return key[0] !== '_' && !globalsWhitelist.has(key);\r\n    },\r\n    set(target, key, value) {\r\n        const { data, renderContext } = target;\r\n        if (data !== EMPTY_OBJ && hasOwn(data, key)) {\r\n            data[key] = value;\r\n        }\r\n        else if (hasOwn(renderContext, key)) {\r\n            renderContext[key] = value;\r\n        }\r\n        else if (key[0] === '$' && key.slice(1) in target) {\r\n            // TODO warn attempt of mutating public property\r\n            return false;\r\n        }\r\n        else if (key in target.props) {\r\n            // TODO warn attempt of mutating prop\r\n            return false;\r\n        }\r\n        else {\r\n            target.user[key] = value;\r\n        }\r\n        return true;\r\n    }\r\n};\r\n","references":["/Users/apple/Desktop/vue3/vue-next/packages/runtime-core/src/component.ts","/Users/apple/Desktop/vue3/vue-next/packages/runtime-core/src/scheduler.ts","/Users/apple/Desktop/vue3/vue-next/packages/runtime-core/src/apiWatch.ts","/Users/apple/Desktop/vue3/vue-next/packages/shared/src/index.ts","/Users/apple/Desktop/vue3/vue-next/packages/runtime-core/src/apiOptions.ts","/Users/apple/Desktop/vue3/vue-next/packages/reactivity/src/index.ts"]}
