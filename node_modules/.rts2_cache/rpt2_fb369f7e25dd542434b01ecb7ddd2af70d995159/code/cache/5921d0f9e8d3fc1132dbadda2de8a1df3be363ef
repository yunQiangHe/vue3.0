{"code":"import { isFunction } from '@vue/shared';\r\nimport { warn } from './warning';\r\nimport { createVNode } from './vnode';\r\nexport function createAppContext() {\r\n    return {\r\n        config: {\r\n            devtools: true,\r\n            performance: false,\r\n            errorHandler: undefined,\r\n            warnHandler: undefined\r\n        },\r\n        mixins: [],\r\n        components: {},\r\n        directives: {},\r\n        provides: {}\r\n    };\r\n}\r\nexport function createAppAPI(render) {\r\n    return function createApp() {\r\n        const context = createAppContext();\r\n        let isMounted = false;\r\n        const app = {\r\n            get config() {\r\n                return context.config;\r\n            },\r\n            set config(v) {\r\n                if (__DEV__) {\r\n                    warn(`app.config cannot be replaced. Modify individual options instead.`);\r\n                }\r\n            },\r\n            use(plugin) {\r\n                if (isFunction(plugin)) {\r\n                    plugin(app);\r\n                }\r\n                else if (isFunction(plugin.install)) {\r\n                    plugin.install(app);\r\n                }\r\n                else if (__DEV__) {\r\n                    warn(`A plugin must either be a function or an object with an \"install\" ` +\r\n                        `function.`);\r\n                }\r\n                return app;\r\n            },\r\n            mixin(mixin) {\r\n                context.mixins.push(mixin);\r\n                return app;\r\n            },\r\n            component(name, component) {\r\n                // TODO component name validation\r\n                if (!component) {\r\n                    return context.components[name];\r\n                }\r\n                else {\r\n                    context.components[name] = component;\r\n                    return app;\r\n                }\r\n            },\r\n            directive(name, directive) {\r\n                // TODO directive name validation\r\n                if (!directive) {\r\n                    return context.directives[name];\r\n                }\r\n                else {\r\n                    context.directives[name] = directive;\r\n                    return app;\r\n                }\r\n            },\r\n            mount(rootComponent, rootContainer, rootProps) {\r\n                if (!isMounted) {\r\n                    const vnode = createVNode(rootComponent, rootProps);\r\n                    // store app context on the root VNode.\r\n                    // this will be set on the root instance on initial mount.\r\n                    vnode.appContext = context;\r\n                    render(vnode, rootContainer);\r\n                    isMounted = true;\r\n                    return vnode.component.renderProxy;\r\n                }\r\n                else if (__DEV__) {\r\n                    warn(`App has already been mounted. Create a new app instance instead.`);\r\n                }\r\n            },\r\n            provide(key, value) {\r\n                if (__DEV__ && key in context.provides) {\r\n                    warn(`App already provides property with key \"${key}\". ` +\r\n                        `It will be overwritten with the new value.`);\r\n                }\r\n                context.provides[key] = value;\r\n            }\r\n        };\r\n        return app;\r\n    };\r\n}\r\n","references":["/Users/apple/Desktop/vue3/vue-next/packages/runtime-core/src/component.ts","/Users/apple/Desktop/vue3/vue-next/packages/runtime-core/src/apiOptions.ts","/Users/apple/Desktop/vue3/vue-next/packages/runtime-core/src/componentProxy.ts","/Users/apple/Desktop/vue3/vue-next/packages/runtime-core/src/directives.ts","/Users/apple/Desktop/vue3/vue-next/packages/runtime-core/src/createRenderer.ts","/Users/apple/Desktop/vue3/vue-next/packages/runtime-core/src/apiInject.ts","/Users/apple/Desktop/vue3/vue-next/packages/shared/src/index.ts","/Users/apple/Desktop/vue3/vue-next/packages/runtime-core/src/warning.ts","/Users/apple/Desktop/vue3/vue-next/packages/runtime-core/src/vnode.ts"]}
