{"code":"import { APPLY_DIRECTIVES } from '../runtimeHelpers';\r\nimport { isSlotOutlet } from '../utils';\r\nexport function hoistStatic(root, context) {\r\n    walk(root.children, context, new Map(), isSingleElementRoot(root, root.children[0]));\r\n}\r\nexport function isSingleElementRoot(root, child) {\r\n    const { children } = root;\r\n    return (children.length === 1 &&\r\n        child.type === 1 /* ELEMENT */ &&\r\n        !isSlotOutlet(child));\r\n}\r\nfunction walk(children, context, resultCache, doNotHoistNode = false) {\r\n    for (let i = 0; i < children.length; i++) {\r\n        const child = children[i];\r\n        // only plain elements are eligible for hoisting.\r\n        if (child.type === 1 /* ELEMENT */ &&\r\n            child.tagType === 0 /* ELEMENT */) {\r\n            if (!doNotHoistNode && isStaticNode(child, resultCache)) {\r\n                // whole tree is static\r\n                ;\r\n                child.codegenNode = context.hoist(child.codegenNode);\r\n                continue;\r\n            }\r\n            else {\r\n                // node may contain dynamic children, but its props may be eligible for\r\n                // hoisting.\r\n                const flag = getPatchFlag(child);\r\n                if (!flag ||\r\n                    flag === 32 /* NEED_PATCH */ ||\r\n                    flag === 1 /* TEXT */) {\r\n                    let codegenNode = child.codegenNode;\r\n                    if (codegenNode.callee === APPLY_DIRECTIVES) {\r\n                        codegenNode = codegenNode.arguments[0];\r\n                    }\r\n                    const props = codegenNode.arguments[1];\r\n                    if (props && props !== `null`) {\r\n                        codegenNode.arguments[1] = context.hoist(props);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (child.type === 1 /* ELEMENT */) {\r\n            walk(child.children, context, resultCache);\r\n        }\r\n        else if (child.type === 11 /* FOR */) {\r\n            // Do not hoist v-for single child because it has to be a block\r\n            walk(child.children, context, resultCache, child.children.length === 1);\r\n        }\r\n        else if (child.type === 9 /* IF */) {\r\n            for (let i = 0; i < child.branches.length; i++) {\r\n                const branchChildren = child.branches[i].children;\r\n                // Do not hoist v-if single child because it has to be a block\r\n                walk(branchChildren, context, resultCache, branchChildren.length === 1);\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction getPatchFlag(node) {\r\n    let codegenNode = node.codegenNode;\r\n    if (codegenNode.callee === APPLY_DIRECTIVES) {\r\n        codegenNode = codegenNode.arguments[0];\r\n    }\r\n    const flag = codegenNode.arguments[3];\r\n    return flag ? parseInt(flag, 10) : undefined;\r\n}\r\nfunction isStaticNode(node, resultCache) {\r\n    switch (node.type) {\r\n        case 1 /* ELEMENT */:\r\n            if (node.tagType !== 0 /* ELEMENT */) {\r\n                return false;\r\n            }\r\n            if (resultCache.has(node)) {\r\n                return resultCache.get(node);\r\n            }\r\n            const flag = getPatchFlag(node);\r\n            if (!flag) {\r\n                // element self is static. check its children.\r\n                for (let i = 0; i < node.children.length; i++) {\r\n                    if (!isStaticNode(node.children[i], resultCache)) {\r\n                        resultCache.set(node, false);\r\n                        return false;\r\n                    }\r\n                }\r\n                resultCache.set(node, true);\r\n                return true;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        case 2 /* TEXT */:\r\n        case 3 /* COMMENT */:\r\n            return true;\r\n        case 9 /* IF */:\r\n        case 11 /* FOR */:\r\n        case 5 /* INTERPOLATION */:\r\n        case 8 /* COMPOUND_EXPRESSION */:\r\n            return false;\r\n        default:\r\n            if (__DEV__) {\r\n                const exhaustiveCheck = node;\r\n                exhaustiveCheck;\r\n            }\r\n            return false;\r\n    }\r\n}\r\n","references":["/Users/apple/Desktop/vue3/vue-next/packages/compiler-core/src/ast.ts","/Users/apple/Desktop/vue3/vue-next/packages/compiler-core/src/transform.ts","/Users/apple/Desktop/vue3/vue-next/packages/compiler-core/src/runtimeHelpers.ts","/Users/apple/Desktop/vue3/vue-next/packages/shared/src/index.ts","/Users/apple/Desktop/vue3/vue-next/packages/compiler-core/src/utils.ts"]}
