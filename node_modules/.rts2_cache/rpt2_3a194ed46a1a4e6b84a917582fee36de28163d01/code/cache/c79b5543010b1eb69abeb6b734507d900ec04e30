{"code":"import { currentInstance } from './component';\r\nimport { normalizeVNode } from './vnode';\r\nimport { isArray, isFunction } from '@vue/shared';\r\nimport { warn } from './warning';\r\nconst normalizeSlotValue = (value) => isArray(value)\r\n    ? value.map(normalizeVNode)\r\n    : [normalizeVNode(value)];\r\nconst normalizeSlot = (key, rawSlot) => (props) => {\r\n    if (__DEV__ && currentInstance != null) {\r\n        warn(`Slot \"${key}\" invoked outside of the render function: ` +\r\n            `this will not track dependencies used in the slot. ` +\r\n            `Invoke the slot function inside the render function instead.`);\r\n    }\r\n    return normalizeSlotValue(rawSlot(props));\r\n};\r\nexport function resolveSlots(instance, children) {\r\n    let slots;\r\n    if (instance.vnode.shapeFlag & 32 /* SLOTS_CHILDREN */) {\r\n        if (children._compiled) {\r\n            // pre-normalized slots object generated by compiler\r\n            slots = children;\r\n        }\r\n        else {\r\n            slots = {};\r\n            for (const key in children) {\r\n                let value = children[key];\r\n                if (isFunction(value)) {\r\n                    ;\r\n                    slots[key] = normalizeSlot(key, value);\r\n                }\r\n                else if (value != null) {\r\n                    if (__DEV__) {\r\n                        warn(`Non-function value encountered for slot \"${key}\". ` +\r\n                            `Prefer function slots for better performance.`);\r\n                    }\r\n                    value = normalizeSlotValue(value);\r\n                    slots[key] = () => value;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else if (children !== null) {\r\n        // non slot object children (direct value) passed to a component\r\n        if (__DEV__) {\r\n            warn(`Non-function value encountered for default slot. ` +\r\n                `Prefer function slots for better performance.`);\r\n        }\r\n        const normalized = normalizeSlotValue(children);\r\n        slots = { default: () => normalized };\r\n    }\r\n    if (slots !== void 0) {\r\n        instance.slots = slots;\r\n    }\r\n}\r\n","references":["/Users/apple/Desktop/vue3/vue-next/packages/runtime-core/src/component.ts","/Users/apple/Desktop/vue3/vue-next/packages/runtime-core/src/vnode.ts","/Users/apple/Desktop/vue3/vue-next/packages/shared/src/index.ts","/Users/apple/Desktop/vue3/vue-next/packages/runtime-core/src/shapeFlags.ts","/Users/apple/Desktop/vue3/vue-next/packages/runtime-core/src/warning.ts"]}
