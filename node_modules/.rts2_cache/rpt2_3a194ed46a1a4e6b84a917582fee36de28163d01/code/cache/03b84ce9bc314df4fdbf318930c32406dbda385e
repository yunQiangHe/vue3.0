{"code":"import { isOn } from '@vue/shared';\r\nexport function serialize(node, indent = 0, depth = 0) {\r\n    if (node.type === \"element\" /* ELEMENT */) {\r\n        return serializeElement(node, indent, depth);\r\n    }\r\n    else {\r\n        return serializeText(node, indent, depth);\r\n    }\r\n}\r\nexport function serializeInner(node, indent = 0, depth = 0) {\r\n    const newLine = indent ? `\\n` : ``;\r\n    return node.children.length\r\n        ? newLine +\r\n            node.children.map(c => serialize(c, indent, depth + 1)).join(newLine) +\r\n            newLine\r\n        : ``;\r\n}\r\nfunction serializeElement(node, indent, depth) {\r\n    const props = Object.keys(node.props)\r\n        .map(key => {\r\n        const value = node.props[key];\r\n        return isOn(key) || value == null ? `` : `${key}=${JSON.stringify(value)}`;\r\n    })\r\n        .filter(_ => _)\r\n        .join(' ');\r\n    const padding = indent ? ` `.repeat(indent).repeat(depth) : ``;\r\n    return (`${padding}<${node.tag}${props ? ` ${props}` : ``}>` +\r\n        `${serializeInner(node, indent, depth)}` +\r\n        `${padding}</${node.tag}>`);\r\n}\r\nfunction serializeText(node, indent, depth) {\r\n    const padding = indent ? ` `.repeat(indent).repeat(depth) : ``;\r\n    return (padding +\r\n        (node.type === \"comment\" /* COMMENT */ ? `<!--${node.text}-->` : node.text));\r\n}\r\n","references":["/Users/apple/Desktop/vue3/vue-next/packages/runtime-test/src/nodeOps.ts","/Users/apple/Desktop/vue3/vue-next/packages/shared/src/index.ts"]}
