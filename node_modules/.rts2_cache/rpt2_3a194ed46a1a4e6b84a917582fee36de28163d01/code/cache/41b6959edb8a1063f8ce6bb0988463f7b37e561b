{"code":"import { currentInstance } from './component';\r\nimport { warn } from './warning';\r\nexport function provide(key, value) {\r\n    if (!currentInstance) {\r\n        if (__DEV__) {\r\n            warn(`provide() can only be used inside setup().`);\r\n        }\r\n    }\r\n    else {\r\n        let provides = currentInstance.provides;\r\n        // by default an instance inherits its parent's provides object\r\n        // but when it needs to provide values of its own, it creates its\r\n        // own provides object using parent provides object as prototype.\r\n        // this way in `inject` we can simply look up injections from direct\r\n        // parent and let the prototype chain do the work.\r\n        const parentProvides = currentInstance.parent && currentInstance.parent.provides;\r\n        if (parentProvides === provides) {\r\n            provides = currentInstance.provides = Object.create(parentProvides);\r\n        }\r\n        provides[key] = value;\r\n    }\r\n}\r\nexport function inject(key, defaultValue) {\r\n    if (currentInstance) {\r\n        const provides = currentInstance.provides;\r\n        if (key in provides) {\r\n            return provides[key];\r\n        }\r\n        else if (defaultValue !== undefined) {\r\n            return defaultValue;\r\n        }\r\n        else if (__DEV__) {\r\n            warn(`injection \"${key}\" not found.`);\r\n        }\r\n    }\r\n    else if (__DEV__) {\r\n        warn(`inject() can only be used inside setup().`);\r\n    }\r\n}\r\n","references":["/Users/apple/Desktop/vue3/vue-next/packages/runtime-core/src/component.ts","/Users/apple/Desktop/vue3/vue-next/packages/runtime-core/src/warning.ts"]}
