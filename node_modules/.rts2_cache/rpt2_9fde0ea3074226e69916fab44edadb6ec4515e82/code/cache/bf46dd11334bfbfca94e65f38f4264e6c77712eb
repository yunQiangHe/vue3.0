{"code":"import { parse } from './parse';\r\nimport { transform } from './transform';\r\nimport { generate } from './codegen';\r\nimport { isString } from '@vue/shared';\r\nimport { transformIf } from './transforms/vIf';\r\nimport { transformFor } from './transforms/vFor';\r\nimport { transformExpression } from './transforms/transformExpression';\r\nimport { transformSlotOutlet } from './transforms/transformSlotOutlet';\r\nimport { transformElement } from './transforms/transformElement';\r\nimport { transformOn } from './transforms/vOn';\r\nimport { transformBind } from './transforms/vBind';\r\nimport { defaultOnError, createCompilerError } from './errors';\r\nimport { trackSlotScopes, trackVForSlotScopes } from './transforms/vSlot';\r\nimport { optimizeText } from './transforms/optimizeText';\r\n// we name it `baseCompile` so that higher order compilers like @vue/compiler-dom\r\n// can export `compile` while re-exporting everything else.\r\nexport function baseCompile(template, options = {}) {\r\n    /* istanbul ignore if */\r\n    if (__BROWSER__) {\r\n        const onError = options.onError || defaultOnError;\r\n        if (options.prefixIdentifiers === true) {\r\n            onError(createCompilerError(47 /* X_PREFIX_ID_NOT_SUPPORTED */));\r\n        }\r\n        else if (options.mode === 'module') {\r\n            onError(createCompilerError(48 /* X_MODULE_MODE_NOT_SUPPORTED */));\r\n        }\r\n    }\r\n    const ast = isString(template) ? parse(template, options) : template;\r\n    const prefixIdentifiers = !__BROWSER__ &&\r\n        (options.prefixIdentifiers === true || options.mode === 'module');\r\n    transform(ast, {\r\n        ...options,\r\n        prefixIdentifiers,\r\n        nodeTransforms: [\r\n            transformIf,\r\n            transformFor,\r\n            ...(prefixIdentifiers\r\n                ? [\r\n                    // order is important\r\n                    trackVForSlotScopes,\r\n                    transformExpression\r\n                ]\r\n                : []),\r\n            trackSlotScopes,\r\n            optimizeText,\r\n            transformSlotOutlet,\r\n            transformElement,\r\n            ...(options.nodeTransforms || []) // user transforms\r\n        ],\r\n        directiveTransforms: {\r\n            on: transformOn,\r\n            bind: transformBind,\r\n            ...(options.directiveTransforms || {}) // user transforms\r\n        }\r\n    });\r\n    return generate(ast, {\r\n        ...options,\r\n        prefixIdentifiers\r\n    });\r\n}\r\n// Also expose lower level APIs & types\r\nexport { parse } from './parse';\r\nexport { transform, createStructuralDirectiveTransform } from './transform';\r\nexport { generate } from './codegen';\r\nexport { createCompilerError } from './errors';\r\nexport * from './ast';\r\n","references":["/Users/apple/Desktop/vue3/vue-next/packages/compiler-core/src/parse.ts","/Users/apple/Desktop/vue3/vue-next/packages/compiler-core/src/transform.ts","/Users/apple/Desktop/vue3/vue-next/packages/compiler-core/src/codegen.ts","/Users/apple/Desktop/vue3/vue-next/packages/compiler-core/src/ast.ts","/Users/apple/Desktop/vue3/vue-next/packages/shared/src/index.ts","/Users/apple/Desktop/vue3/vue-next/packages/compiler-core/src/transforms/vIf.ts","/Users/apple/Desktop/vue3/vue-next/packages/compiler-core/src/transforms/vFor.ts","/Users/apple/Desktop/vue3/vue-next/packages/compiler-core/src/transforms/transformExpression.ts","/Users/apple/Desktop/vue3/vue-next/packages/compiler-core/src/transforms/transformSlotOutlet.ts","/Users/apple/Desktop/vue3/vue-next/packages/compiler-core/src/transforms/transformElement.ts","/Users/apple/Desktop/vue3/vue-next/packages/compiler-core/src/transforms/vOn.ts","/Users/apple/Desktop/vue3/vue-next/packages/compiler-core/src/transforms/vBind.ts","/Users/apple/Desktop/vue3/vue-next/packages/compiler-core/src/errors.ts","/Users/apple/Desktop/vue3/vue-next/packages/compiler-core/src/transforms/vSlot.ts","/Users/apple/Desktop/vue3/vue-next/packages/compiler-core/src/transforms/optimizeText.ts","/Users/apple/Desktop/vue3/vue-next/packages/compiler-core/src/parse.ts","/Users/apple/Desktop/vue3/vue-next/packages/compiler-core/src/transform.ts","/Users/apple/Desktop/vue3/vue-next/packages/compiler-core/src/codegen.ts","/Users/apple/Desktop/vue3/vue-next/packages/compiler-core/src/errors.ts","/Users/apple/Desktop/vue3/vue-next/packages/compiler-core/src/ast.ts"]}
