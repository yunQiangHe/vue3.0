{"code":"import { markNonReactive } from '@vue/reactivity';\r\nlet nodeId = 0;\r\nlet recordedNodeOps = [];\r\nexport function logNodeOp(op) {\r\n    recordedNodeOps.push(op);\r\n}\r\nexport function resetOps() {\r\n    recordedNodeOps = [];\r\n}\r\nexport function dumpOps() {\r\n    const ops = recordedNodeOps.slice();\r\n    resetOps();\r\n    return ops;\r\n}\r\nfunction createElement(tag) {\r\n    const node = {\r\n        id: nodeId++,\r\n        type: \"element\" /* ELEMENT */,\r\n        tag,\r\n        children: [],\r\n        props: {},\r\n        parentNode: null,\r\n        eventListeners: null\r\n    };\r\n    logNodeOp({\r\n        type: \"create\" /* CREATE */,\r\n        nodeType: \"element\" /* ELEMENT */,\r\n        targetNode: node,\r\n        tag\r\n    });\r\n    // avoid test nodes from being observed\r\n    markNonReactive(node);\r\n    return node;\r\n}\r\nfunction createText(text) {\r\n    const node = {\r\n        id: nodeId++,\r\n        type: \"text\" /* TEXT */,\r\n        text,\r\n        parentNode: null\r\n    };\r\n    logNodeOp({\r\n        type: \"create\" /* CREATE */,\r\n        nodeType: \"text\" /* TEXT */,\r\n        targetNode: node,\r\n        text\r\n    });\r\n    // avoid test nodes from being observed\r\n    markNonReactive(node);\r\n    return node;\r\n}\r\nfunction createComment(text) {\r\n    const node = {\r\n        id: nodeId++,\r\n        type: \"comment\" /* COMMENT */,\r\n        text,\r\n        parentNode: null\r\n    };\r\n    logNodeOp({\r\n        type: \"create\" /* CREATE */,\r\n        nodeType: \"comment\" /* COMMENT */,\r\n        targetNode: node,\r\n        text\r\n    });\r\n    // avoid test nodes from being observed\r\n    markNonReactive(node);\r\n    return node;\r\n}\r\nfunction setText(node, text) {\r\n    logNodeOp({\r\n        type: \"setText\" /* SET_TEXT */,\r\n        targetNode: node,\r\n        text\r\n    });\r\n    node.text = text;\r\n}\r\nfunction insert(child, parent, ref) {\r\n    let refIndex;\r\n    if (ref != null) {\r\n        refIndex = parent.children.indexOf(ref);\r\n        if (refIndex === -1) {\r\n            console.error('ref: ', ref);\r\n            console.error('parent: ', parent);\r\n            throw new Error('ref is not a child of parent');\r\n        }\r\n    }\r\n    logNodeOp({\r\n        type: \"insert\" /* INSERT */,\r\n        targetNode: child,\r\n        parentNode: parent,\r\n        refNode: ref\r\n    });\r\n    // remove the node first, but don't log it as a REMOVE op\r\n    remove(child, false);\r\n    // re-calculate the ref index because the child's removal may have affected it\r\n    refIndex = ref ? parent.children.indexOf(ref) : -1;\r\n    if (refIndex === -1) {\r\n        parent.children.push(child);\r\n        child.parentNode = parent;\r\n    }\r\n    else {\r\n        parent.children.splice(refIndex, 0, child);\r\n        child.parentNode = parent;\r\n    }\r\n}\r\nfunction remove(child, logOp = true) {\r\n    const parent = child.parentNode;\r\n    if (parent != null) {\r\n        if (logOp) {\r\n            logNodeOp({\r\n                type: \"remove\" /* REMOVE */,\r\n                targetNode: child,\r\n                parentNode: parent\r\n            });\r\n        }\r\n        const i = parent.children.indexOf(child);\r\n        if (i > -1) {\r\n            parent.children.splice(i, 1);\r\n        }\r\n        else {\r\n            console.error('target: ', child);\r\n            console.error('parent: ', parent);\r\n            throw Error('target is not a childNode of parent');\r\n        }\r\n        child.parentNode = null;\r\n    }\r\n}\r\nfunction setElementText(el, text) {\r\n    logNodeOp({\r\n        type: \"setElementText\" /* SET_ELEMENT_TEXT */,\r\n        targetNode: el,\r\n        text\r\n    });\r\n    el.children.forEach(c => {\r\n        c.parentNode = null;\r\n    });\r\n    if (!text) {\r\n        el.children = [];\r\n    }\r\n    else {\r\n        el.children = [\r\n            {\r\n                id: nodeId++,\r\n                type: \"text\" /* TEXT */,\r\n                text,\r\n                parentNode: el\r\n            }\r\n        ];\r\n    }\r\n}\r\nfunction parentNode(node) {\r\n    return node.parentNode;\r\n}\r\nfunction nextSibling(node) {\r\n    const parent = node.parentNode;\r\n    if (!parent) {\r\n        return null;\r\n    }\r\n    const i = parent.children.indexOf(node);\r\n    return parent.children[i + 1] || null;\r\n}\r\nfunction querySelector() {\r\n    throw new Error('querySelector not supported in test renderer.');\r\n}\r\nexport const nodeOps = {\r\n    insert,\r\n    remove,\r\n    createElement,\r\n    createText,\r\n    createComment,\r\n    setText,\r\n    setElementText,\r\n    parentNode,\r\n    nextSibling,\r\n    querySelector\r\n};\r\n","references":["/Users/apple/Desktop/vue3/vue-next/packages/reactivity/src/index.ts"]}
